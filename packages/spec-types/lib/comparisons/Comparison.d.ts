import { type Valuable } from "../prototypes/Valuable";
import { type EqualTo, type TaggedEqualTo } from "./$eq";
import { type GreaterThan, type TaggedGreaterThan } from "./$gt";
import { type GreaterThanOrEqualTo, type TaggedGreaterThanOrEqualTo } from "./$gte";
import { type In, type TaggedIn } from "./$in";
import { type LessThan, type TaggedLessThan } from "./$lt";
import { type LessThanOrEqualTo, type TaggedLessThanOrEqualTo } from "./$lte";
import { NotEqualTo, type TaggedNotEqualTo } from "./$neq";
import { type NotIn, type TaggedNotIn } from "./$nin";
import { type XOR } from "./XOR";
export declare const $COMPARISON: readonly ["$eq", "$gt", "$gte", "$in", "$lt", "$lte", "$ne", "$nin"];
export type $Comparison = typeof $COMPARISON[number];
type ExclusiveGreaterThan<V extends Valuable> = XOR<GreaterThan<V>, GreaterThanOrEqualTo<V>>;
type ExclusiveLessThan<V extends Valuable> = XOR<LessThan<V>, LessThanOrEqualTo<V>>;
export type EQ = EqualTo | TaggedEqualTo;
export type GT = GreaterThan | TaggedGreaterThan;
export type GTE = GreaterThanOrEqualTo | TaggedGreaterThanOrEqualTo;
export type IN = In | TaggedIn;
export type LT = LessThan | TaggedLessThan;
export type LTE = LessThanOrEqualTo | TaggedLessThanOrEqualTo;
export type NE = NotEqualTo | TaggedNotEqualTo;
export type NIN = NotIn | TaggedNotIn;
export type TaggedComparison<V extends Valuable = Valuable> = TaggedEqualTo<V> | TaggedIn<V> | TaggedGreaterThan<V> | TaggedGreaterThanOrEqualTo<V> | TaggedLessThan<V> | TaggedLessThanOrEqualTo<V> | TaggedNotEqualTo<V> | TaggedNotIn<V>;
export type Comparison<V extends Valuable = Valuable> = EqualTo<V> | NotEqualTo<V> | In<V> | NotIn<V> | ExclusiveGreaterThan<V> | ExclusiveLessThan<V> | (ExclusiveGreaterThan<V> & ExclusiveLessThan<V>);
export declare const verifyComparison: <V extends Valuable = Valuable, E = Comparison<V> | TaggedComparison<V>>(val: V | V[], expr: E, error: (msg: string) => void) => boolean | undefined;
export {};
//# sourceMappingURL=Comparison.d.ts.map